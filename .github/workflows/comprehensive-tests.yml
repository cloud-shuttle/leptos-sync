name: Comprehensive Test Suite

on: 
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install dependencies
        run: |
          cargo install cargo-tarpaulin
          cargo install cargo-audit
          
      - name: Run unit tests
        run: |
          cargo test --workspace --lib --bins
          
      - name: Run documentation tests
        run: |
          cargo test --workspace --doc
          
      - name: Run clippy
        run: |
          cargo clippy --workspace --all-targets -- -D warnings
          
      - name: Run rustfmt
        run: |
          cargo fmt --all -- --check
          
      - name: Security audit
        run: |
          cargo audit

  integration-tests:
    runs-on: ubuntu-latest
    services:
      websocket-server:
        image: node:18
        ports:
          - 3001:3001
        options: --health-cmd "curl -f http://localhost:3001/health" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Start WebSocket server
        run: |
          cd tests/test-server
          npm install
          npm start &
          sleep 10
          
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run integration tests
        run: |
          cargo test --test integration -- --test-threads=1
          
      - name: Run contract tests
        run: |
          cargo test --test contracts -- --test-threads=1

  browser-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install browser dependencies
        run: |
          npm install -g @wasm-tool/wasm-pack-plugin
          npm install -g webpack webpack-cli webpack-dev-server
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            pkg
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build WASM package
        run: |
          wasm-pack build --target web --out-dir pkg
          
      - name: Run browser tests
        run: |
          wasm-pack test --chrome --headless --firefox --headless
          
      - name: Run WASM tests in Node.js
        run: |
          wasm-pack test --node

  property-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-property-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install proptest
        run: |
          cargo install proptest
          
      - name: Run property tests
        run: |
          cargo test --test property -- --test-threads=1
          
      - name: Run property tests with more cases
        run: |
          PROPTEST_CASES=1000 cargo test --test property -- --test-threads=1

  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install criterion
        run: |
          cargo install cargo-criterion
          
      - name: Run performance benchmarks
        run: |
          cargo bench --bench sync_performance
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/
          retention-days: 30

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install tarpaulin
        run: |
          cargo install cargo-tarpaulin
          
      - name: Generate coverage
        run: |
          cargo tarpaulin --out xml --output-dir coverage/ --workspace
          
      - name: Upload to codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  test-coverage-report:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v4
      
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          
      - name: Generate coverage report
        run: |
          echo "# Test Coverage Report" > coverage/README.md
          echo "" >> coverage/README.md
          echo "## Summary" >> coverage/README.md
          echo "- **Total Coverage**: $(grep -o 'coverage="[^"]*"' coverage/cobertura.xml | head -1 | cut -d'"' -f2)%" >> coverage/README.md
          echo "- **Generated**: $(date)" >> coverage/README.md
          echo "" >> coverage/README.md
          echo "## Details" >> coverage/README.md
          echo "See the attached coverage files for detailed information." >> coverage/README.md
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-with-readme
          path: coverage/
          retention-days: 30

  security-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
          
      - name: Run security audit
        run: |
          cargo audit
          
      - name: Run dependency check
        run: |
          cargo deny check
          
      - name: Check for known vulnerabilities
        run: |
          cargo audit --deny warnings

  compatibility-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
          
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-compat-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run compatibility tests
        run: |
          cargo test --workspace --lib
          
      - name: Run clippy
        run: |
          cargo clippy --workspace --all-targets -- -D warnings

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, browser-tests, property-tests, performance-tests, coverage, security-tests, compatibility-tests]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Browser Tests | ${{ needs.browser-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Property Tests | ${{ needs.property-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compatibility Tests | ${{ needs.compatibility-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All tests completed successfully!" >> $GITHUB_STEP_SUMMARY
